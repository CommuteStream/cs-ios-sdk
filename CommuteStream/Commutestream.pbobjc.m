// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commutestream.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Commutestream.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CSPCommutestreamRoot

@implementation CSPCommutestreamRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CSPCommutestreamRoot_FileDescriptor

static GPBFileDescriptor *CSPCommutestreamRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"CSP"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CSPStop

@implementation CSPStop

@dynamic agencyId;
@dynamic routeId;
@dynamic stopId;

typedef struct CSPStop__storage_ {
  uint32_t _has_storage_[1];
  NSString *agencyId;
  NSString *routeId;
  NSString *stopId;
} CSPStop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agencyId",
        .dataTypeSpecific.className = NULL,
        .number = CSPStop_FieldNumber_AgencyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSPStop__storage_, agencyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routeId",
        .dataTypeSpecific.className = NULL,
        .number = CSPStop_FieldNumber_RouteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSPStop__storage_, routeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stopId",
        .dataTypeSpecific.className = NULL,
        .number = CSPStop_FieldNumber_StopId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSPStop__storage_, stopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSPStop class]
                                     rootClass:[CSPCommutestreamRoot class]
                                          file:CSPCommutestreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSPStop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSPStopAd

@implementation CSPStopAd

@dynamic requestId;
@dynamic hasStop, stop;
@dynamic icon;
@dynamic title;
@dynamic backgroundColor;

typedef struct CSPStopAd__storage_ {
  uint32_t _has_storage_[1];
  CSPStop *stop;
  NSData *icon;
  NSString *title;
  NSString *backgroundColor;
  uint64_t requestId;
} CSPStopAd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAd_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSPStopAd__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "stop",
        .dataTypeSpecific.className = GPBStringifySymbol(CSPStop),
        .number = CSPStopAd_FieldNumber_Stop,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSPStopAd__storage_, stop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAd_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSPStopAd__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAd_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSPStopAd__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundColor",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAd_FieldNumber_BackgroundColor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CSPStopAd__storage_, backgroundColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSPStopAd class]
                                     rootClass:[CSPCommutestreamRoot class]
                                          file:CSPCommutestreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSPStopAd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSPStopAdResponse

@implementation CSPStopAdResponse

@dynamic stopAdsArray, stopAdsArray_Count;

typedef struct CSPStopAdResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *stopAdsArray;
} CSPStopAdResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stopAdsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSPStopAd),
        .number = CSPStopAdResponse_FieldNumber_StopAdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSPStopAdResponse__storage_, stopAdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSPStopAdResponse class]
                                     rootClass:[CSPCommutestreamRoot class]
                                          file:CSPCommutestreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSPStopAdResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CSPDeviceID

@implementation CSPDeviceID

@dynamic deviceIdType;
@dynamic deviceId;

typedef struct CSPDeviceID__storage_ {
  uint32_t _has_storage_[1];
  CSPDeviceID_Type deviceIdType;
  NSString *deviceId;
} CSPDeviceID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceIdType",
        .dataTypeSpecific.enumDescFunc = CSPDeviceID_Type_EnumDescriptor,
        .number = CSPDeviceID_FieldNumber_DeviceIdType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSPDeviceID__storage_, deviceIdType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = CSPDeviceID_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSPDeviceID__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSPDeviceID class]
                                     rootClass:[CSPCommutestreamRoot class]
                                          file:CSPCommutestreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSPDeviceID__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CSPDeviceID_DeviceIdType_RawValue(CSPDeviceID *message) {
  GPBDescriptor *descriptor = [CSPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSPDeviceID_FieldNumber_DeviceIdType];
  return GPBGetMessageInt32Field(message, field);
}

void SetCSPDeviceID_DeviceIdType_RawValue(CSPDeviceID *message, int32_t value) {
  GPBDescriptor *descriptor = [CSPDeviceID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CSPDeviceID_FieldNumber_DeviceIdType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CSPDeviceID_Type

GPBEnumDescriptor *CSPDeviceID_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Idfa\000Aaid\000";
    static const int32_t values[] = {
        CSPDeviceID_Type_Idfa,
        CSPDeviceID_Type_Aaid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CSPDeviceID_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CSPDeviceID_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CSPDeviceID_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case CSPDeviceID_Type_Idfa:
    case CSPDeviceID_Type_Aaid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CSPStopAdRequest

@implementation CSPStopAdRequest

@dynamic adUnit;
@dynamic hasDeviceId, deviceId;
@dynamic timezone;
@dynamic stopsArray, stopsArray_Count;

typedef struct CSPStopAdRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *adUnit;
  CSPDeviceID *deviceId;
  NSString *timezone;
  NSMutableArray *stopsArray;
} CSPStopAdRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adUnit",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAdRequest_FieldNumber_AdUnit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSPStopAdRequest__storage_, adUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = GPBStringifySymbol(CSPDeviceID),
        .number = CSPStopAdRequest_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSPStopAdRequest__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timezone",
        .dataTypeSpecific.className = NULL,
        .number = CSPStopAdRequest_FieldNumber_Timezone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSPStopAdRequest__storage_, timezone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stopsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CSPStop),
        .number = CSPStopAdRequest_FieldNumber_StopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CSPStopAdRequest__storage_, stopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSPStopAdRequest class]
                                     rootClass:[CSPCommutestreamRoot class]
                                          file:CSPCommutestreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSPStopAdRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
